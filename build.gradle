group "co.nvqa"
version "1.0.0"
apply plugin: "java"

sourceCompatibility = JavaVersion.VERSION_1_8

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.5"
    }
}

repositories {
    mavenCentral()
}

configurations {
    agent
}

dependencies {
    agent "org.aspectj:aspectjweaver:1.9.2"

    testImplementation "com.google.inject:guice:4.2.2"
    testImplementation "com.google.guava:guava:27.0.1-jre"

    testImplementation "io.cucumber:cucumber-java:4.2.6"
    testImplementation "io.cucumber:cucumber-junit:4.2.6"
    testImplementation "io.cucumber:cucumber-guice:4.2.6"
    testImplementation "io.qameta.allure:allure-cucumber4-jvm:2.10.0"


    testImplementation "org.seleniumhq.selenium:selenium-java:3.141.59"
    testImplementation "io.github.bonigarcia:webdrivermanager:3.3.0"

    testImplementation "io.rest-assured:rest-assured:3.3.0"
    testImplementation "io.rest-assured:json-path:3.3.0"

    testImplementation "javax.xml.bind:jaxb-api:2.3.1"
    testImplementation "junit:junit:4.12"

    implementation "org.seleniumhq.selenium:selenium-java:3.141.59"
}

apply plugin: io.qameta.allure.gradle.AllurePlugin

allure {
    version = "2.9.0"
    aspectjweaver = true
    autoconfigure = false
    downloadLink = "https://dl.bintray.com/qameta/maven/io/qameta/allure/allure-commandline/${version}/allure-commandline-${version}.zip"
}

task runCucumber(type: JavaExec) {
    main = "cucumber.api.cli.Main"
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs = ["-XX:+IgnoreUnrecognizedVMOptions", "--add-modules java.se.ee"]
    args = [
            "--monochrome",
            "--snippets", "camelcase",
            "--plugin", "pretty",
            "--plugin", "html:build/reports/html-output",
            "--plugin", "junit:build/reports/cucumber-junit/cucumber.xml",
            "--glue", "co.nvqa.ninja_demo.glue",
            "${sourceSets.test.output.resourcesDir}/features"
    ]

    if (project.hasProperty("tags")) {
        def tags = project.getProperty("tags")
        args "--tags", tags
    }

    if (project.hasProperty("useAllure")) {
        def useAllure = project.getProperty("useAllure")

        if (useAllure) {
            args "--plugin", "io.qameta.allure.cucumber4jvm.AllureCucumber4Jvm"
            jvmArgs "-javaagent:${configurations.agent.singleFile}"
            systemProperties["allure.results.directory"] = "build/allure-results"
        }
    }
}